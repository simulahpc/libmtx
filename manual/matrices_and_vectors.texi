@c This file is part of libmtx.
@c Copyright (C) 2022 James D. Trotter
@c
@c libmtx is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c libmtx is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with libmtx.  If not, see <https://www.gnu.org/licenses/>.
@c
@c Authors: James D. Trotter <james@simula.no>
@c Last modified: 2022-01-05
@c
@c libmtx User Guide: Matrices and vectors.

@node Matrices and vectors
@chapter Matrices and vectors

This chapter explains how to convert Matrix Market files to matrices
and vectors based on other storage formats, and how to perform various
linear algebra operations involving matrices and vectors. For now, we
are concerned with matrices and vectors on a single, shared-memory
machine or node. For matrices and vectors that are distributed across
multiple processes using MPI, see @ref{Distributed matrices and
vectors}.

One of the goals of libmtx is to allow for experimenting with various
storage formats for matrices and vectors, as well as different
implementations of basic linear algebra operations. Moreover, it
should be simple to switch from one storage format or implementation
to another. To achieve this, libmtx defines a single, common data
type, @code{struct mtxvector}, for working with vectors that may have
different underlying storage formats or implementations. Similarly, a
single data type, @code{struct mtxmatrix}, is used for matrices that
may have different underlying implementations.

This chapter starts by introducing the common matrix and vector data
types and their interfaces. Thereafter, detailed descriptions are
given for the different matrix and vector implementations.


@menu
* Vectors:: Data structures for vectors.
* Matrices:: Data structures for matrices.
@end menu


@node Vectors
@section Vectors

@tindex struct mtxvector
The file @file{libmtx/vector/vector.h} defines the type @code{struct
mtxvector}. This is a single, abstract data type used to represent a
vector with different options available for the underlying storage and
implementation of vector operations.
@example
@code{struct mtxvector @{
    enum mtxvectortype type;
    union @{
        struct mtxvector_array array;
        struct mtxvector_coordinate coordinate;
    @} storage;
@};}
@end example
The two basic kinds of vectors are @emph{array} and @emph{coordinate}
vectors. The enum type @code{mtxvectortype} is used to enumerate
vector storage formats.
@example
@code{enum mtxvectortype @{
    mtxvector_auto,       /* automatic selection of vector type */
    mtxvector_array,      /* array format for dense vectors */
    mtxvector_coordinate, /* coordinate format for sparse vectors */
@};}
@end example

@node Creating vectors
@subsection Creating vectors
This section covers functions that are provided to construct vectors.

@cindex free
@findex mtxvector_free
The function @code{mtxvector_free} is used to free storage allocated
for a vector.
@example
@code{void mtxvector_free(struct mtxvector * vector);}
@end example

@cindex copy
@findex mtxvector_init_copy
To create a copy of an existing vector, use the function
@code{mtxvector_init_copy}.
@example
@code{int mtxvector_init_copy(
    struct mtxvector * dst,
    const struct mtxvector * src);}
@end example

@cindex copy
@findex mtxvector_alloc_copy
If storage for a copy of an existing vector is needed, but the vector
values should not be copied or initialised, use the function
@code{mtxvector_alloc_copy}.
@example
@code{int mtxvector_alloc_copy(
    struct mtxvector * dst,
    const struct mtxvector * src);}
@end example

@cindex allocate
@cindex array format
@cindex coordinate format
@findex mtxvector_alloc_array
@findex mtxvector_alloc_coordinate
To allocate storage for a vector in @emph{array} or @emph{coordinate}
format, the functions @code{mtxvector_alloc_array} or
@code{mtxvector_alloc_coordinate} may be used.
@example
@code{int mtxvector_alloc_array(
    struct mtxvector * vector,
    enum mtxfield field,
    enum mtxprecision precision,
    int num_rows);

int mtxvector_alloc_coordinate(
    struct mtxvector * vector,
    enum mtxfield field,
    enum mtxprecision precision,
    int num_rows,
    int64_t num_nonzeros);}
@end example
In both cases, the desired field and precision must be specified, as
well as the number of rows. For a vector in coordinate format, it is
also necessary to specify the number of nonzero vector elements. Note
that the vector values are not initialised, and so it is up to the
user to initialise them.

@findex mtxvector_init_@var{type}_@var{field}_@var{precision}
If the vector values are already known, then there are also functions
for allocating a vector and initialising the values directly. This can
be done by calling
@code{mtxvector_init_@var{type}_@var{field}_@var{precision}}, where
@code{@var{type}}, @code{@var{field}} and @code{@var{precision}}
denote the vector type (i.e., @samp{array} or @samp{coordinate}),
field (i.e., @samp{real}, @samp{complex} or @samp{integer}) and
precision (i.e., @samp{single} or @samp{double}).

@findex mtxvector_init_array_complex_double
For example, to create a double precision, complex vector in array
format, use @code{mtxvector_init_array_complex_double}.
@example
@code{int mtxvector_init_array_complex_double(
    struct mtxvector * vector,
    int num_rows,
    const double (* data)[2]);}
@end example
The vector entries are provided by the array @code{data}, which must
contain @code{num_rows} values.

@findex mtxvector_init_coordinate_complex_double
To create a double precision, complex vector in coordinate format, use
@code{mtxvector_init_coordinate_complex_double}.
@example
@code{int mtxvector_init_coordinate_complex_double(
    struct mtxvector * vector,
    int num_rows,
    int64_t num_nonzeros,
    const int * idx,
    const double (* values)[2]);}
@end example
The arguments @code{idx} and @code{values} are arrays of length
@code{num_nonzeros}. Each index @samp{idx[0]}, @samp{idx[1]}, ...,
@samp{idx[num_nonzeros-1]}, is an integer in the range
@code{[0,num_rows)}.

Note that duplicate entries are allowed, but this may cause some
operations (e.g., @code{mtxvector_dot}, @code{mtxvector_nrm2})) to
produce incorrect results.


@node Modifying vector values
@subsection Modifying values
@findex mtxvector_set_constant_@var{field}_@var{precision}
The functions
@code{mtxvector_set_constant_@var{field}_@var{precision}} can be used
to set every (nonzero) value of a vector equal to a constant scalar,
where @code{@var{field}} and @code{@var{precision}} should match the
field (i.e., @samp{real}, @samp{complex} or @samp{integer}) and
precision (i.e., @samp{single} or @samp{double}) of @code{mtxvector}.
@findex mtxvector_set_constant_real_single
@findex mtxvector_set_constant_real_double
@findex mtxvector_set_constant_complex_single
@findex mtxvector_set_constant_complex_double
@findex mtxvector_set_constant_integer_single
@findex mtxvector_set_constant_integer_double
@example
@code{int mtxvector_set_constant_real_single(
    struct mtxvector *, float a);
int mtxvector_set_constant_real_double(
    struct mtxvector *, double a);
int mtxvector_set_constant_complex_single(
    struct mtxvector *, float a[2]);
int mtxvector_set_constant_complex_double(
    struct mtxvector *, double a[2]);
int mtxvector_set_constant_integer_single(
    struct mtxvector *, int32_t a);
int mtxvector_set_constant_integer_double(
    struct mtxvector *, int64_t a);}
@end example
To access or modify individual vector elements, the underlying vector
storage is accessed through the appropriate member of the
@code{storage} union in the @code{mtxvector} struct.


@node Converting vectors to and from Matrix Market format
@subsection Converting to and from Matrix Market format
In many cases, a vector may already be available in Matrix Market
format. However, for reasons involving both performance and
convenience, it is often a good idea to convert the data from Matrix
Market format to a more suitable representation before carrying out
computations.

@findex mtxvector_from_mtxfile
To convert a vector in Matrix Market format to @code{struct
mtxvector}, the function @code{mtxvector_from_mtxfile} can be used.
@example
@code{int mtxvector_from_mtxfile(
    struct mtxvector * mtxvector,
    const struct mtxfile * mtxfile,
    enum mtxvectortype type);}
@end example
The user may use the @code{type} argument to specify a desired storage
format or implementation for @code{mtxvector}. If @code{type} is
@samp{mtxvector_auto}, then the type of @code{mtxvector} is chosen to
match the type of @code{mtxfile}. That is, @samp{mtxvector_array} is
used if @code{mtxfile} is a vector in array format, and
@samp{mtxvector_coordinate} is used if @code{mtxfile} is a vector in
coordinate format.

@cindex assemble
@cindex duplicate nonzeros
When converting to a vector in coordinate format, the vector is sorted
and assembly is carried out to remove duplicate nonzero entriesq (see
@ref{mtxfile_assemble}).

@findex mtxvector_to_mtxfile
Conversely, having performed the necessary computations, it is
sometimes useful to convert a vector back to Matrix Market format.
For example, to make it easier to output the vector to a file. To
convert @code{struct mtxvector} to a vector in Matrix Market format,
the function @code{mtxvector_to_mtxfile} can be used.
@example
@code{int mtxvector_to_mtxfile(
    const struct mtxvector * mtxvector,
    struct mtxfile * mtxfile);}
@end example
The resulting Matrix Market file may be a vector in array or
coordinate format, depending on the type of @code{mtxvector}.


@node Reading and writing vectors
@subsection Reading and writing Matrix Market files
For convenience, the function @code{mtxvector_read},
@code{mtxvector_fread} and @code{mtxvector_gzread} are provided to
more easily read a vector from a file in Matrix Market format and
convert it to a desired vector representation. These functions are
based on the functions described in @ref{Reading and writing Matrix
Market files}.
@findex mtxvector_read
@findex mtxvector_fread
@findex mtxvector_gzead
@example
@code{int mtxvector_read(
    struct mtxvector * vector,
    enum mtxprecision precision,
    enum mtxvectortype type,
    const char * path,
    bool gzip,
    int * lines_read,
    int64_t * bytes_read);

int mtxvector_fread(
    struct mtxvector * vector,
    enum mtxprecision precision,
    enum mtxvectortype type,
    FILE * f,
    int * lines_read,
    int64_t * bytes_read,
    size_t line_max,
    char * linebuf);

int mtxvector_gzread(
    struct mtxvector * vector,
    enum mtxprecision precision,
    enum mtxvectortype type,
    gzFile f,
    int * lines_read,
    int64_t * bytes_read,
    size_t line_max,
    char * linebuf);}
@end example
The @code{type} argument specifies which format to use for
representing the vector.  If @code{type} is @samp{mtxvector_auto},
then the underlying vector is stored in array format or coordinate
format according to the format of the Matrix Market file. Otherwise,
an attempt is made to convert the vector to the desired type.

@findex mtxvector_write
@findex mtxvector_fwrite
@findex mtxvector_gzwrite
Similarly, the functions @code{mtxvector_write},
@code{mtxvector_fwrite} and @code{mtxvector_gzwrite} are provided to
write a vector to a file in Matrix Market format.
@example
@code{int mtxvector_write(
    const struct mtxvector * vector,
    const char * path,
    bool gzip,
    const char * fmt,
    int64_t * bytes_written);

int mtxvector_fwrite(
    const struct mtxvector * vector,
    FILE * f,
    const char * fmt,
    int64_t * bytes_written);

int mtxvector_gzwrite(
    const struct mtxvector * vector,
    gzFile f,
    const char * fmt,
    int64_t * bytes_written);}
@end example


@node Vectors: Level 1 BLAS
@subsection Level 1 BLAS
@cindex BLAS
The libmtx C library implements a subset of the Basic Linear Algebra
Subprograms (BLAS) routines. For dense operations, libmtx can use
optimised, third-party BLAS libraries, such as OpenBLAS
(@url{https://www.openblas.net/}). Otherwise, libmtx uses internal
routines for sparse matrix operations.

The following Level 1 BLAS operations are supported:
@cindex @code{swap}
@cindex @code{copy}
@cindex @code{scal}
@cindex @code{axpy}
@cindex @code{aypx}
@cindex @code{dot}
@cindex @code{nrm2}
@cindex @code{asum}
@cindex @code{iamax}
@cindex vector scaling
@cindex vector addition
@cindex Euclidean inner product
@cindex Euclidean norm
@cindex sum of absolute values
@itemize
@item @code{swap} --- swap two vectors, @code{y <- x} and @code{x <- y}
@item @code{copy} --- copy a vector, @code{y = x}
@item @code{scal} --- scale by a constant, @code{x = a*x}
@item @code{axpy} and @code{aypx} --- add two vectors, @code{y = a*x + y} or @code{y = a*y + x}
@item @code{dot} --- Euclidean inner product
@item @code{nrm2} --- Euclidean norm
@item @code{asum} --- sum of absolute values
@item @code{iamax} --- find element with largest absolute value
@end itemize

@findex mtxvector_swap
@findex mtxvector_copy
The function @code{mtxvector_swap} swaps the values of two vectors,
whereas @code{mtxvector_copy} copies the values from one vector to
another.
@example
@code{int mtxvector_swap(struct mtxvector * x, struct mtxvector * y);
int mtxvector_copy(struct mtxvector * y, const struct mtxvector * x);}
@end example

@findex mtxvector_sscal
@findex mtxvector_dscal
The functions @code{mtxvector_sscal} and @code{mtxvector_dscal} are
used to scale a vector @code{x} by a floating point constant @code{a}
in single or double precision, respectively. That is, @code{x = a*x}.
@example
@code{int mtxvector_sscal(
    float a,
    struct mtxvector * x,
    int64_t * num_flops);

int mtxvector_dscal(
    double a,
    struct mtxvector * x,
    int64_t * num_flops);}
@end example
Note that most of the BLAS functions in libmtx take an additional
argument @code{num_flops}, which can be used to obtain the number of
floating point operations that were carried out. If @code{num_flops}
is @samp{NULL}, then it is ignored.

@findex mtxvector_saxpy
@findex mtxvector_daxpy
The functions @code{mtxvector_saxpy} and @code{mtxvector_daxpy} add a
vector to another vector multiplied by a single or double precision
floating point value, @code{y = a*x + y}.
@example
@code{int mtxvector_saxpy(
    float a,
    const struct mtxvector * x,
    struct mtxvector * y,
    int64_t * num_flops);

int mtxvector_daxpy(
    double a,
    const struct mtxvector * x,
    struct mtxvector * y,
    int64_t * num_flops);}
@end example

@findex mtxvector_saypx
@findex mtxvector_daypx
Similarly, @code{mtxvector_saypx} and @code{mtxvector_daypx} multiply
a vector by a single or double precision floating point scalar before
adding the result to another vector, @code{y = a*y + x}.
@example
@code{int mtxvector_saypx(
    float a,
    struct mtxvector * y,
    const struct mtxvector * x,
    int64_t * num_flops);

int mtxvector_daypx(
    double a,
    struct mtxvector * y,
    const struct mtxvector * x,
    int64_t * num_flops);}
@end example

@findex mtxvector_sdot
@findex mtxvector_ddot
The functions @code{mtxvector_sdot} and @code{mtxvector_ddot} compute
the Euclidean dot product of two real- or integer-valued vectors.
@example
@code{int mtxvector_sdot(
    const struct mtxvector * x,
    const struct mtxvector * y,
    float * dot,
    int64_t * num_flops);

int mtxvector_ddot(
    const struct mtxvector * x,
    const struct mtxvector * y,
    double * dot,
    int64_t * num_flops);}
@end example

@findex mtxvector_cdotu
@findex mtxvector_zdotu
@findex mtxvector_cdotc
@findex mtxvector_zdotc
For complex vectors, the functions @code{mtxvector_cdotu} and
@code{mtxvector_zdotu} are used to compute the product of the
transpose of a complex row vector with another complex row vector,
@code{x^T*y}, where @code{x^T} denotes the transpose of @code{x}. The
functions @code{mtxvector_cdotc} and @code{mtxvector_zdotc} compute
the Euclidean dot product of two complex vectors, @code{x^H*y}, where
@code{x^H} denotes the conjugate transpose of @code{x}.
@example
@code{int mtxvector_cdotu(
    const struct mtxvector * x,
    const struct mtxvector * y,
    float (* dot)[2],
    int64_t * num_flops);

int mtxvector_zdotu(
    const struct mtxvector * x,
    const struct mtxvector * y,
    double (* dot)[2],
    int64_t * num_flops);

int mtxvector_cdotc(
    const struct mtxvector * x,
    const struct mtxvector * y,
    float (* dot)[2],
    int64_t * num_flops);

int mtxvector_zdotc(
    const struct mtxvector * x,
    const struct mtxvector * y,
    double (* dot)[2],
    int64_t * num_flops);}
@end example

@findex mtxvector_snrm2
@findex mtxvector_dnrm2
The functions @code{mtxvector_snrm2} and @code{mtxvector_dnrm2}
compute the Euclidean norm of a vector. in single and double precision
floating point, respectively.
@example
@code{int mtxvector_snrm2(
    const struct mtxvector * x,
    float * nrm2,
    int64_t * num_flops);

int mtxvector_dnrm2(
    const struct mtxvector * x,
    double * nrm2,
    int64_t * num_flops);}
@end example

@findex mtxvector_sasum
@findex mtxvector_dasum
The functions @code{mtxvector_sasum} and @code{mtxvector_dasum}
compute the sum of absolute values, or 1-norm, of a vector. in single
and double precision floating point, respectively. If the vector is
complex-valued, then the sum of the absolute values of the real and
imaginaty parts is computed.
@example
@code{int mtxvector_sasum(
    const struct mtxvector * x,
    float * asum,
    int64_t * num_flops);

int mtxvector_dasum(
    const struct mtxvector * x,
    double * asum,
    int64_t * num_flops);}
@end example

@findex mtxvector_iamax
The function @code{mtxvector_iamax} finds the index of the first
element having the largest absolute value among all the vector
elements. If the vector is complex-valued, then the index points to
the first element having the maximum sum of the absolute values of the
real and imaginary parts.
@example
@code{int mtxvector_iamax(
    const struct mtxvector * x,
    int * iamax);}
@end example


@node Matrices
@section Matrices

@tindex struct mtxmatrix
The file @file{libmtx/matrix/matrix.h} defines the type @code{struct
mtxmatrix}. This is a single, abstract data type used to represent a
matrix with different options available for the underlying storage and
implementation of matrix operations.
@example
@code{struct mtxmatrix @{
    enum mtxmatrixtype type;
    union @{
        struct mtxmatrix_array array;
        struct mtxmatrix_coordinate coordinate;
    @} storage;
@};}
@end example
The idea is for libmtx to provide several storage formats and
implementations for sparse matrices, but there are two basic kinds of
matrices obtained directly from the Matrix Market format, namely
@emph{array} and @emph{coordinate} matrices. In the future, libmtx
will also provide sparse matrices in Compressed Sparse Row (CSR) and
ELL (or ELLPACK) format.

The enum type @code{mtxmatrixtype} is used to enumerate matrix storage
formats.
@example
@code{enum mtxmatrixtype @{
    mtxmatrix_auto,       /* automatic selection of matrix type */
    mtxmatrix_array,      /* array format for dense matrices */
    mtxmatrix_coordinate, /* coordinate format for sparse matrices */
@};}
@end example

@node Creating matrices
@subsection Creating matrices
This section covers functions that are provided to construct matrices.

The function @code{mtxmatrix_free} is used to free storage allocated
for a matrix.
@example
@code{void mtxmatrix_free(struct mtxmatrix * matrix);}
@end example

To create a copy of an existing matrix, use the function @code{mtxmatrix_init_copy}.
@example
@code{int mtxmatrix_init_copy(
    struct mtxmatrix * dst,
    const struct mtxmatrix * src);}
@end example

If storage for a copy of an existing matrix is needed, but the matrix
values should not be copied or initialised, use the function
@code{mtxmatrix_alloc_copy}.
@example
@code{int mtxmatrix_alloc_copy(
    struct mtxmatrix * dst,
    const struct mtxmatrix * src);}
@end example

To allocate storage for a matrix in @emph{array} or @emph{coordinate}
format, the functions @code{mtxmatrix_alloc_array} or
@code{mtxmatrix_alloc_coordinate} may be used.
@example
@code{int mtxmatrix_alloc_array(
    struct mtxmatrix * matrix,
    enum mtxfield field,
    enum mtxprecision precision,
    int num_rows,
    int num_columns);

int mtxmatrix_alloc_coordinate(
    struct mtxmatrix * matrix,
    enum mtxfield field,
    enum mtxprecision precision,
    int num_rows,
    int num_columns,
    int64_t num_nonzeros);}
@end example
In both cases, the desired field and precision must be specified, as
well as the number of rows. For a matrix in coordinate format, it is
also necessary to specify the number of nonzero matrix elements. Note
that the matrix values are not initialised, and so it is up to the
user to initialise them.

If the matrix values are already known, then there are also functions
for allocating a matrix and initialising the values directly. This can
be done by calling
@code{mtxmatrix_init_@var{type}_@var{field}_@var{precision}}, where
@code{@var{type}}, @code{@var{field}} and @code{@var{precision}}
denote the matrix type (i.e., @samp{array} or @samp{coordinate}),
field (i.e., @samp{real}, @samp{complex} or @samp{integer}) and
precision (i.e., @samp{single} or @samp{double}) of the matrix.

For example, to create a double precision, complex matrix in array
format, use @code{mtxmatrix_init_array_complex_double}.
@example
@code{int mtxmatrix_init_array_complex_double(
    struct mtxmatrix * matrix,
    int num_rows,
    int num_columns,
    const double (* data)[2]);}
@end example
The matrix entries are provided by the array @code{data}, which must
contain @code{num_rows*num_columns} values.

To create a double precision, complex matrix in coordinate format, use
@code{mtxmatrix_init_coordinate_complex_double}.
@example
@code{int mtxmatrix_init_coordinate_complex_double(
    struct mtxmatrix * matrix,
    int num_rows,
    int num_columns,
    int64_t num_nonzeros,
    const int * rowidx,
    const int * colidx,
    const double (* values)[2]);}
@end example
The arguments @code{rowidx}, @code{colidx} and @code{values} are
arrays of length @code{num_nonzeros}. For each nonzero value
@code{k=0,1,...,num_nonzeros-1}, @code{rowidx[k]} is a row index in
the range @code{[0,num_rows)}, whereas @code{colidx[k]} is a column
index in the range @code{[0,num_columns)}.

Note that duplicate entries are allowed, but this may cause some
operations (e.g., @code{mtxmatrix_dot}, @code{mtxmatrix_nrm2},
@code{mtxmatrix_sgemv}) to produce incorrect results.


@node Modifying matrix values
@subsection Modifying values
The functions
@code{mtxmatrix_set_constant_@var{field}_@var{precision}} can be used
to set every (nonzero) value of a matrix equal to a constant scalar,
where @code{@var{field}} and @code{@var{precision}} should match the
field (i.e., @samp{real}, @samp{complex} or @samp{integer}) and
precision (i.e., @samp{single} or @samp{double}) of @code{mtxmatrix}.
@example
@code{int mtxmatrix_set_constant_real_single(
    struct mtxmatrix *, float a);
int mtxmatrix_set_constant_real_double(
    struct mtxmatrix *, double a);
int mtxmatrix_set_constant_complex_single(
    struct mtxmatrix *, float a[2]);
int mtxmatrix_set_constant_complex_double(
    struct mtxmatrix *, double a[2]);
int mtxmatrix_set_constant_integer_single(
    struct mtxmatrix *, int32_t a);
int mtxmatrix_set_constant_integer_double(
    struct mtxmatrix *, int64_t a);}
@end example
To access or modify individual matrix elements, the underlying matrix
storage is accessed through the appropriate member of the
@code{storage} union in the @code{mtxmatrix} struct.


@node Converting matrices to and from Matrix Market format
@subsection Converting to and from Matrix Market format
In many cases, a matrix may already be available in Matrix Market
format. However, for reasons involving both performance and
convenience, it is often a good idea to convert the data from Matrix
Market format to a more suitable representation before carrying out
computations.

To convert a matrix in Matrix Market format to @code{struct
mtxmatrix}, the function @code{mtxmatrix_from_mtxfile} can be used.
@example
@code{int mtxmatrix_from_mtxfile(
    struct mtxmatrix * mtxmatrix,
    const struct mtxfile * mtxfile,
    enum mtxmatrixtype type);}
@end example
The user may use the @code{type} argument to specify a desired storage
format or implementation for @code{mtxmatrix}. If @code{type} is
@samp{mtxmatrix_auto}, then the type of @code{mtxmatrix} is chosen to
match the type of @code{mtxfile}. That is, @samp{mtxmatrix_array} is
used if @code{mtxfile} is a matrix in array format, and
@samp{mtxmatrix_coordinate} is used if @code{mtxfile} is a matrix in
coordinate format.

Conversely, having performed the necessary computations, it is
sometimes useful to convert a matrix back to Matrix Market format.
For example, to make it easier to output the matrix to a file. To
convert @code{struct mtxmatrix} to a matrix in Matrix Market format,
the function @code{mtxmatrix_to_mtxfile} can be used.
@example
@code{int mtxmatrix_to_mtxfile(
    const struct mtxmatrix * mtxmatrix,
    struct mtxfile * mtxfile);}
@end example
The resulting Matrix Market file may be a matrix in array or
coordinate format, depending on the type of @code{mtxmatrix}.


@node Reading and writing matrices
@subsection Reading and writing Matrix Market files
For convenience, the function @code{mtxmatrix_read},
@code{mtxmatrix_fread} and @code{mtxmatrix_gzread} are provided to
more easily read a matrix from a file in Matrix Market format and
convert it to a desired matrix representation. These functions are
based on the functions described in @ref{Reading and writing Matrix
Market files}.
@example
@code{int mtxmatrix_read(
    struct mtxmatrix * matrix,
    enum mtxprecision precision,
    enum mtxmatrixtype type,
    const char * path,
    bool gzip,
    int * lines_read,
    int64_t * bytes_read);

int mtxmatrix_fread(
    struct mtxmatrix * matrix,
    enum mtxprecision precision,
    enum mtxmatrixtype type,
    FILE * f,
    int * lines_read,
    int64_t * bytes_read,
    size_t line_max,
    char * linebuf);

int mtxmatrix_gzread(
    struct mtxmatrix * matrix,
    enum mtxprecision precision,
    enum mtxmatrixtype type,
    gzFile f,
    int * lines_read,
    int64_t * bytes_read,
    size_t line_max,
    char * linebuf);}
@end example
The @code{type} argument specifies which format to use for
representing the matrix.  If @code{type} is @samp{mtxmatrix_auto},
then the underlying matrix is stored in array format or coordinate
format according to the format of the Matrix Market file. Otherwise,
an attempt is made to convert the matrix to the desired type.

Similarly, the functions @code{mtxmatrix_write},
@code{mtxmatrix_fwrite} and @code{mtxmatrix_gzwrite} are provided to
write a matrix to a file in Matrix Market format.
@example
@code{int mtxmatrix_write(
    const struct mtxmatrix * matrix,
    const char * path,
    bool gzip,
    const char * fmt,
    int64_t * bytes_written);

int mtxmatrix_fwrite(
    const struct mtxmatrix * matrix,
    FILE * f,
    const char * fmt,
    int64_t * bytes_written);

int mtxmatrix_gzwrite(
    const struct mtxmatrix * matrix,
    gzFile f,
    const char * fmt,
    int64_t * bytes_written);}
@end example


@node Matrices: Level 1 BLAS
@subsection Level 1 BLAS
It is sometimes useful to treat a matrix as a vector (sometimes called
the @emph{vectorisation} of a matrix) and then apply level 1 BLAS
operations. This section describes level 1 BLAS operations for
@code{struct mtxmatrix}. These are more or less identical to the level
1 BLAS operations described for vectors in @ref{Vectors: Level 1
BLAS}, except that arguments with the type @code{struct mtxvector} are
replaced with @code{struct mtxmatrix}.

The following Level 1 BLAS operations are supported:
@cindex @code{swap}
@cindex @code{copy}
@cindex @code{scal}
@cindex @code{axpy}
@cindex @code{aypx}
@cindex @code{dot}
@cindex @code{nrm2}
@cindex @code{asum}
@cindex @code{iamax}
@cindex matrix scaling
@cindex matrix addition
@cindex Frobenius inner product
@cindex Frobenius norm
@cindex sum of absolute values
@itemize
@item @code{swap} --- swap two matrices, @code{Y <- X} and @code{X <- Y}
@item @code{copy} --- copy a matrix, @code{Y = X}
@item @code{scal} --- scale by a constant, @code{X = a*X}
@item @code{axpy} and @code{aypx} --- add two matrices, @code{Y = a*X + Y} or @code{Y = a*Y + X}
@item @code{dot} --- Frobenius inner product
@item @code{nrm2} --- Frobenius norm
@item @code{asum} --- sum of absolute values
@item @code{iamax} --- find element with largest absolute value
@end itemize

The function @code{mtxmatrix_swap} swaps the values of two matrices,
whereas @code{mtxmatrix_copy} copies the values from one matrix to
another.
@example
@code{int mtxmatrix_swap(struct mtxmatrix * X, struct mtxmatrix * Y);
int mtxmatrix_copy(struct mtxmatrix * X, const struct mtxmatrix * Y);}
@end example

The functions @code{mtxmatrix_sscal} and @code{mtxmatrix_dscal} are
used to scale a matrix @code{X} by a floating point constant @code{a}
in single or double precision, respectively. That is, @code{X = a*X}.
@example
@code{int mtxmatrix_sscal(
    float a,
    struct mtxmatrix * X,
    int64_t * num_flops);

int mtxmatrix_dscal(
    double a,
    struct mtxmatrix * X,
    int64_t * num_flops);}
@end example
Note that most of the BLAS functions in libmtx take an additional
argument @code{num_flops}, which can be used to obtain the number of
floating point operations that were carried out. If @code{num_flops}
is @samp{NULL}, then it is ignored.

The functions @code{mtxmatrix_saxpy} and @code{mtxmatrix_daxpy} add a
matrix to another matrix multiplied by a single or double precision
floating point value, @code{Y = a*X + Y}.
@example
@code{int mtxmatrix_saxpy(
    float a,
    const struct mtxmatrix * X,
    struct mtxmatrix * Y,
    int64_t * num_flops);

int mtxmatrix_daxpy(
    double a,
    const struct mtxmatrix * X,
    struct mtxmatrix * Y,
    int64_t * num_flops);}
@end example

Similarly, @code{mtxmatrix_saypx} and @code{mtxmatrix_daypx} multiply
a matrix by a single or double precision floating point scalar before
adding the result to another matrix, @code{Y = a*Y + X}.
@example
@code{int mtxmatrix_saypx(
    float a,
    struct mtxmatrix * Y,
    const struct mtxmatrix * X,
    int64_t * num_flops);

int mtxmatrix_daypx(
    double a,
    struct mtxmatrix * Y,
    const struct mtxmatrix * X,
    int64_t * num_flops);}
@end example

The functions @code{mtxmatrix_sdot} and @code{mtxmatrix_ddot} compute
the Frobenius dot product of two real- or integer-valued matrices.
@example
@code{int mtxmatrix_sdot(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    float * dot,
    int64_t * num_flops);

int mtxmatrix_ddot(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    double * dot,
    int64_t * num_flops);}
@end example

For complex matrices, the functions @code{mtxmatrix_cdotu} and
@code{mtxmatrix_zdotu} are used to compute the dot product of the
transpose of a complex matrix with another complex matrix,
@code{vec(X)^T*vec(Y)}, where @code{x^T} denotes the transpose of
@code{x} and @code{vec(X)} is the vectorisation of the matrix
@code{X}. The functions @code{mtxmatrix_cdotc} and
@code{mtxmatrix_zdotc} compute the Frobenius dot product of two
complex matrices, @code{vec(X)^H*vec(Y)}, where @code{x^H} denotes the
conjugate transpose of @code{x}.
@example
@code{int mtxmatrix_cdotu(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    float (* dot)[2],
    int64_t * num_flops);

int mtxmatrix_zdotu(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    double (* dot)[2],
    int64_t * num_flops);

int mtxmatrix_cdotc(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    float (* dot)[2],
    int64_t * num_flops);

int mtxmatrix_zdotc(
    const struct mtxmatrix * X,
    const struct mtxmatrix * Y,
    double (* dot)[2],
    int64_t * num_flops);}
@end example

The functions @code{mtxmatrix_snrm2} and @code{mtxmatrix_dnrm2}
compute the Frobenius norm of a matrix. in single and double precision
floating point, respectively.
@example
@code{int mtxmatrix_snrm2(
    const struct mtxmatrix * X,
    float * nrm2,
    int64_t * num_flops);

int mtxmatrix_dnrm2(
    const struct mtxmatrix * X,
    double * nrm2,
    int64_t * num_flops);}
@end example

The functions @code{mtxmatrix_sasum} and @code{mtxmatrix_dasum}
compute the sum of absolute values of a matrix in single and double
precision floating point, respectively. (Note that this is not the
same as the 1-norm of a matrix.) If the matrix is complex-valued, then
the sum of the absolute values of the real and imaginaty parts is
computed.
@example
@code{int mtxmatrix_sasum(
    const struct mtxmatrix * X,
    float * asum,
    int64_t * num_flops);

int mtxmatrix_dasum(
    const struct mtxmatrix * X,
    double * asum,
    int64_t * num_flops);}
@end example

The function @code{mtxmatrix_iamax} finds the index of the first
element having the largest absolute value among all the matrix
elements. If the matrix is complex-valued, then the index points to
the first element having the maximum sum of the absolute values of the
real and imaginary parts.
@example
@code{int mtxmatrix_iamax(
    const struct mtxmatrix * X,
    int * iamax);}
@end example


@node Matrices: Level 2 BLAS
@subsection Level 2 BLAS

@cindex matrix-vector multiplication
@cindex @code{sgemv}
@cindex @code{dgemv}
@cindex @code{cgemv}
@cindex @code{zgemv}
Some of the most useful linear algebra operations are covered by the
Level 2 BLAS routines, which involve a matrix and one or more
vectors. This section describes level 2 BLAS operations for
@code{struct mtxmatrix}, in particular matrix-vector multiplication.

The following Level 2 BLAS operations are supported:
@itemize
@item @code{sgemv}, @code{dgemv} ---
general, real matrix-vector multiplication, @code{y = α*A*x + β*y} or
@code{y = α*A'*x + β*y}
@item @code{cgemv}, @code{zgemv} ---
general, complex matrix-vector multiplication, @code{y = α*A*x + β*y},
@code{y = α*A'*x + β*y} or @code{y = α*A^H*x + β*y}
@end itemize

The function @code{mtxmatrix_sgemv} multiplies a matrix @code{A} or
its transpose @samp{A'} by a real scalar @code{alpha} (@code{α}) and a
vector @code{x}, before adding the result to another vector @code{y}
multiplied by another real scalar @code{beta} (@code{β}). That is,
@code{y = α*A*x + β*y} or @code{y = α*A'*x + β*y}. In this version,
the scalars @code{alpha} and @code{beta} are given as single precision
floating point numbers.
@example
@code{int mtxmatrix_sgemv(
    enum mtxtransposition trans,
    float alpha,
    const struct mtxmatrix * A,
    const struct mtxvector * x,
    float beta,
    struct mtxvector * y);}
@end example
If @code{trans} is @samp{mtx_notrans}, the matrix @code{A} is used. If
@code{trans} is @samp{mtx_trans}, then @code{A'} is used instead.

The function @code{mtxmatrix_dgemv} performs the same operation as
@code{mtxmatrix_sgemv}, except that the scalars @code{alpha} and
@code{beta} are now given as double precision floating point numbers.
@example
@code{int mtxmatrix_dgemv(
    enum mtxtransposition trans,
    double alpha,
    const struct mtxmatrix * A,
    const struct mtxvector * x,
    double beta,
    struct mtxvector * y);}
@end example

There are also two analogous routines, @code{mtxmatrix_cgemv} and
@code{mtxmatrix_zgemv} for the cases where @code{alpha} and
@code{beta} are given as complex numbers in single and double
precision floating point, respectively. These functions can also be
used to multiply with the conjugate transpose @samp{A^H}, if
@code{trans} is @samp{mtx_conjtrans}.
@example
@code{int mtxmatrix_cgemv(
    enum mtxtransposition trans,
    float alpha[2],
    const struct mtxmatrix * A,
    const struct mtxvector * x,
    float beta[2],
    struct mtxvector * y);

int mtxmatrix_zgemv(
    enum mtxtransposition trans,
    double alpha[2],
    const struct mtxmatrix * A,
    const struct mtxvector * x,
    double beta[2],
    struct mtxvector * y);}
@end example
