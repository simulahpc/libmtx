@c This file is part of libmtx.
@c Copyright (C) 2021 James D. Trotter
@c
@c libmtx is free software: you can redistribute it and/or
@c modify it under the terms of the GNU General Public License as
@c published by the Free Software Foundation, either version 3 of the
@c License, or (at your option) any later version.
@c
@c libmtx is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with libmtx.  If not, see
@c <https://www.gnu.org/licenses/>.
@c
@c Authors: James D. Trotter <james@simula.no>
@c Last modified: 2021-07-01
@c
@c libmtx User Guide: Commands.

@node Commands
@chapter Commands

This section contains a list of command-line programs provided by
libmtx for working with Matrix Market files.

@table @command
@pindex mtxinfo
@item mtxinfo
reads a Matrix Market file, validates the contents and displays some
high-level information about the Matrix Market object.

@pindex mtxgemv
@item mtxgemv
multiplies a general, unsymmetric matrix by a vector.

@pindex mtxsort
@item mtxsort
sorts the entries of a dense or sparse matrix, for example, in row- or
column-major order.

@pindex mtxreorder
@item mtxreorder
reorders the nonzeros of a sparse matrix, for example, using the
Reverse Cuthill-McKee (RCM) ordering (@pxref{E. Cuthill and J. McKee
(1969)}).

@pindex mtxscatter
@item mtxscatter
distributes a Matrix Market file among MPI processes and stores the
resulting distributed Matrix Market file for each process.

@pindex mtxgather
@item mtxgather
collects Matrix Market files that
represent a distributed matrix or vector from multiple MPI processes,
accumulates the results on a single MPI root process and stores the
resulting Matrix Market file.

@end table

Further details about each program are given in the following
sections.

@menu
* @command{mtxinfo}::
* @command{mtxgemv}::
* @command{mtxsort}::
* @command{mtxreorder}::
* @command{mtxscatter}::
* @command{mtxgather}::
@end menu

@node @command{mtxinfo}
@section @command{mtxinfo}
@pindex mtxinfo

The command @command{mtxinfo} reads a Matrix Market file, validates the
contents and displays some high-level information about the Matrix
Market object.
@example
@code{mtxinfo [OPTION..] FILE}
@end example

The following options are accepted:
@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter the file through gzip.

@item -v, --verbose
Print diagnostics to standard error.

@end table


@node @command{mtxgemv}
@section @command{mtxgemv}
@pindex mtxgemv

The command @command{mtxgemv} is used to multiply a general,
unsymmetric matrix with a vector. The result is written to standard
output in the form of a Matrix Market file representing the result
vector. More specifically, the calculation carried out is
@samp{@var{y} := @var{alpha}*@var{A}*@var{x} + @var{beta}*@var{y}}.

The @command{mtxgemv} command accepts a number of positional arguments
corresponding to the variables in the matrix-vector multiplication:
@example
@code{mtxgemv [OPTION..] @var{alpha} @var{A} [@var{x}] [@var{beta}] [@var{y}]}
@end example

The positional arguments are:
@table @option
@item @var{alpha}
The scalar floating-point value @option{@var{alpha}}.

@item @var{A}
Path to a Matrix Market file containing the matrix @option{@var{A}}.

@item @var{x}
Path to a Matrix Market file containing the vector
@option{@var{x}}. If this argument is omitted or an empty string
(i.e., @kbd{""}), then a vector of ones of length equal to the number
of columns of @option{@var{A}} is used.

@item @var{beta}
The scalar floating-point value @option{@var{beta}}. If this argument is
omitted, then @option{@var{beta}} is set equal to one.

@item @var{y}
Path to a Matrix Market file containing the vector @option{@var{y}}. If this
argument is omitted, then a vector of zeros of length equal to the
number of rows of @option{@var{A}} is used.

@end table

In addition, the following options are accepted:

@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter files through gzip.

@item --format=FORMAT
Format string for outputting numerical values.  For real, double and
complex values, the format specifiers @samp{%e}, @samp{%E}, @samp{%f},
@samp{%F}, @samp{%g} or @samp{%G} may be used, whereas @samp{%d} must
be used for integers. Flags, field width and precision can optionally
be specified, e.g., @samp{%+3.1f}.

@item --repeat=N
The number of times to repeat the matrix-vector multiplication.

@item -q, --quiet
Do not print the resulting Matrix Market file to standard output.

@item -v, --verbose
Print some diagnostics to the standard error stream.

@end table


@node @command{mtxsort}
@section @command{mtxsort}
@pindex mtxsort

The command @command{mtxsort} is used to sort the entries of a dense
or sparse matrix, for example, in row- or column-major order.
@example
@code{mtxsort [OPTION..] FILE}
@end example

The following options are accepted:

@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter the file through gzip.

@item --format=FORMAT
Format string for outputting numerical values.  For real, double and
complex values, the format specifiers @samp{%e}, @samp{%E}, @samp{%f},
@samp{%F}, @samp{%g} or @samp{%G} may be used, whereas @samp{%d} must
be used for integers. Flags, field width and precision can optionally
be specified, e.g., @samp{%+3.1f}.

@item --sorting=SORTING
The ordering to use when sorting the data. This is either
@samp{row-major} or @samp{column-major}. By default, @samp{row-major}
is used.

@item -q, --quiet
Do not print the resulting Matrix Market file to standard output.

@item -v, --verbose
Print diagnostics to standard error.

@end table


@node @command{mtxreorder}
@section @command{mtxreorder}
@pindex mtxreorder

The command @command{mtxreorder} is used to reorder the rows and
columns of a sparse matrix, for example, using the Reverse
Cuthill-McKee (RCM) ordering (@pxref{E. Cuthill and J. McKee (1969)}).
@example
@code{mtxreorder [OPTION..] FILE}
@end example

The following options are accepted:

@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter the file through gzip

@item --format=FORMAT
Format string for outputting numerical values.  For real, double and
complex values, the format specifiers '%e', '%E', '%f', '%F', '%g' or
'%G' may be used, whereas '%d' must be used for integers. Flags, field
width and precision can optionally be specified, e.g., "%+3.1f".

@item --rowperm-path=FILE
Path for outputting row permuation as a dense vector in Matrix Market
format.

@item --colperm-path=FILE
Path for outputting column permuation as a dense vector in Matrix
Market format.

@item --ordering=ORDERING
The reordering algorithm to use. For now, the only supported algorithm
is @samp{rcm}.

@item --rcm-starting-row=N
Starting row for the RCM algorithm.  The default value is @samp{-1},
which means to choose a starting row automatically.

@item -q, --quiet
Do not print the resulting Matrix Market file to standard output.

@item -v, --verbose
Print diagnostics to standard error.

@end table


@node @command{mtxscatter}
@section @command{mtxscatter}
@pindex mtxscatter

The command @command{mtxscatter} distributes a Matrix Market file among
MPI processes and stores the resulting distributed Matrix Market file
for each process. This command is only included if MPI support is
enabled.
@example
@code{mtxscatter [OPTION..] FILE}
@end example

The following options are accepted:

@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter files through gzip.

@item --output-path=FILE
Output path for the scattered Matrix Market files, where @samp{%p} in
the string is replaced with the rank of each MPI process. If not
specified, the default output path is @samp{out%p.mtx}.

@item --format=FORMAT
Format string for outputting numerical values.  For real, double and
complex values, the format specifiers @samp{%e}, @samp{%E}, @samp{%f},
@samp{%F}, @samp{%g} or @samp{%G} may be used, whereas @samp{%d} must
be used for integers. Flags, field width and precision can optionally
be specified, e.g., @samp{%+3.1f}.

@item -v, --verbose
Print diagnostics to standard error.

@end table

@node @command{mtxgather}
@section @command{mtxgather}
@pindex mtxgather

The command @command{mtxgather} collects Matrix Market files that
represent a distributed matrix or vector from multiple MPI processes,
accumulates the results on a single MPI root process and stores the
resulting Matrix Market file. This command is only included if MPI
support is enabled.
@example
@code{mtxgather [OPTION..] FILE..}
@end example

The following options are accepted:

@table @option
@item -z, --gzip, --gunzip, --ungzip
Filter files through gzip.

@item --format=FORMAT
Format string for outputting numerical values.  For real, double and
complex values, the format specifiers @samp{%e}, @samp{%E}, @samp{%f},
@samp{%F}, @samp{%g} or @samp{%G} may be used, whereas @samp{%d} must
be used for integers. Flags, field width and precision can optionally
be specified, e.g., @samp{%+3.1f}.

@item -q, --quiet
Do not print the resulting Matrix Market file to standard output.

@item -v, --verbose
Print diagnostics to standard error.

@end table
