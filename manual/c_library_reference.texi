@c This file is part of libmtx.
@c Copyright (C) 2021 James D. Trotter
@c
@c libmtx is free software: you can redistribute it and/or
@c modify it under the terms of the GNU General Public License as
@c published by the Free Software Foundation, either version 3 of the
@c License, or (at your option) any later version.
@c
@c libmtx is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with libmtx.  If not, see
@c <https://www.gnu.org/licenses/>.
@c
@c Authors: James D. Trotter <james@simula.no>
@c Last modified: 2021-08-03
@c
@c libmtx User Guide: C library reference.

@node C library reference
@chapter C library reference

This chapter is provided as a reference for the libmtx C
library.

@section Error handling
@tindex mtxerror
@example
@code{enum mtxerror
@{
  MTX_SUCCESS = 0,                        /* no error */
  MTX_ERR_ERRNO = -1,                     /* error code given by errno */
  MTX_ERR_MPI = -2,                       /* MPI error */
  MTX_ERR_EOF = -3,                       /* unexpected end-of-file */
  MTX_ERR_LINE_TOO_LONG = -4,             /* line exceeds max length */
  MTX_ERR_INVALID_MTX_HEADER = -5,        /* invalid mtx header */
  MTX_ERR_INVALID_MTX_OBJECT = -6,        /* invalid mtx object */
  MTX_ERR_INVALID_MTX_FORMAT = -7,        /* invalid mtx format */
  MTX_ERR_INVALID_MTX_FIELD = -8,         /* invalid mtx field */
  MTX_ERR_INVALID_MTX_SYMMETRY = -9,      /* invalid mtx symmetry */
  MTX_ERR_INVALID_MTX_SORTING = -10,      /* invalid mtx sorting */
  MTX_ERR_INVALID_MTX_ORDERING = -11,     /* invalid mtx ordering */
  MTX_ERR_INVALID_MTX_ASSEMBLY = -12,     /* invalid mtx assembly */
  MTX_ERR_INVALID_MTX_SIZE = -13,         /* invalid mtx size info */
  MTX_ERR_INVALID_MTX_DATA = -14,         /* invalid mtx data */
  MTX_ERR_INVALID_INDEX_SET_TYPE = -15,   /* invalid index set type */
  MTX_ERR_INVALID_STREAM_TYPE = -16,      /* invalid stream type */
  MTX_ERR_INVALID_FORMAT_SPECIFIER = -17, /* invalid format specifier */
  MTX_ERR_INDEX_OUT_OF_BOUNDS = -18,      /* index out of bounds */
@};}
@end example

@findex mtxstrerror
@findex mtxdiststrerror
@example
@code{const char * mtxstrerror(int err);

const char * mtxdiststrerror(
    int err,
    int mpierrcode,
    char * mpierrstr);}
@end example


@section Header information

@tindex mtx_object
@tindex mtx_format
@tindex mtx_field
@tindex mtx_symmetry
@example
@code{enum mtx_object @{
    mtx_matrix,
    mtx_vector
@};

enum mtx_format @{
    mtx_array,     /* array of dense matrix values */
    mtx_coordinate /* coordinate format of sparse matrix values */
@};

enum mtx_field @{
    mtx_real,    /* single-precision floating point coefficients */
    mtx_double,  /* double-precision floating point coefficients */
    mtx_complex, /* single-precision floating point complex
                  * coefficients */
    mtx_integer, /* integer coefficients */
    mtx_pattern  /* boolean coefficients (sparsity pattern) */
@};

enum mtx_symmetry @{
    mtx_general,        /* general, non-symmetric matrix */
    mtx_symmetric,      /* symmetric matrix */
    mtx_skew_symmetric, /* skew-symmetric matrix */
    mtx_hermitian       /* Hermitian matrix */
@};}
@end example


@subsection Additional header information

@tindex mtx_triangle
@tindex mtx_sorting
@tindex mtx_ordering
@tindex mtx_assembly
@tindex mtx_assembled
@tindex mtx_unassembled
@tindex mtxpartitioning
@example
@code{enum mtx_triangle @{
    mtx_nontriangular,    /* nonzero above, below or on main diagonal */
    mtx_lower_triangular, /* zero above main diagonal */
    mtx_upper_triangular, /* zero below main diagonal */
    mtx_diagonal,         /* zero above and below main diagonal */
@};

enum mtx_sorting @{
    mtx_unsorted,       /* unsorted matrix nonzeros */
    mtx_row_major,      /* row major ordering */
    mtx_column_major,   /* column major ordering */
@};

enum mtx_ordering @{
    mtx_unordered,      /* general, unordered matrix */
    mtx_rcm,            /* Reverse Cuthill-McKee ordering */
@};

enum mtx_assembly @{
    mtx_unassembled, /* unassembled; duplicate nonzeros allowed. */
    mtx_assembled,   /* assembled; duplicate nonzeros not allowed. */
@};

enum mtxpartitioning @{
    mtxpartition,   /* matrix/vector entries are owned
                      * by a single MPI process. */
    mtx_cover,       /* matrix/vector entries may be shared
                      * by multiple MPI processes. */
@};}
@end example


@section Sparse matrix and vector data types

@tindex mtx_matrix_coordinate_real
@tindex mtx_matrix_coordinate_double
@tindex mtx_matrix_coordinate_complex
@tindex mtx_matrix_coordinate_integer
@tindex mtx_matrix_coordinate_pattern
@tindex mtx_vector_coordinate_real
@tindex mtx_vector_coordinate_double
@tindex mtx_vector_coordinate_complex
@tindex mtx_vector_coordinate_integer
@tindex mtx_vector_coordinate_pattern
@example
@code{/*
 * Sparse matrix data types.
 */
struct mtx_matrix_coordinate_real @{
    int i, j; /* row and column index */
    float a;  /* nonzero value */
@};

struct mtx_matrix_coordinate_double @{
    int i, j; /* row and column index */
    double a; /* nonzero value */
@};

struct mtx_matrix_coordinate_complex @{
    int i, j;     /* row and column index */
    float a, b;   /* real and imaginary parts of nonzero value */
@};

struct mtx_matrix_coordinate_integer @{
    int i, j; /* row and column index */
    int a;    /* nonzero value */
@};

struct mtx_matrix_coordinate_pattern @{
    int i, j; /* row and column index */
@};

/*
 * Sparse vector data types.
 */

struct mtx_vector_coordinate_real @{
    int i;    /* row index */
    float a;  /* nonzero value */
@};

struct mtx_vector_coordinate_double @{
    int i;    /* row index */
    double a; /* nonzero value */
@};

struct mtx_vector_coordinate_complex @{
    int i;        /* row index */
    float a, b;   /* real and imaginary parts of nonzero value */
@};

struct mtx_vector_coordinate_integer @{
    int i;    /* row index */
    int a;    /* nonzero value */
@};

struct mtx_vector_coordinate_pattern @{
    int i; /* row index */
@};}
@end example


@section Matrix Market data type

@tindex struct mtx
@tindex mtx
@example
@code{struct mtx @{
  /* Header */
  enum mtx_object object;
  enum mtx_format format;
  enum mtx_field field;
  enum mtx_symmetry symmetry;

  /* Extra header info */
  enum mtx_sorting sorting;
  enum mtx_ordering ordering;
  enum mtx_assembly assembly;

  /* Comments */
  int num_comment_lines;
  char ** comment_lines;

  /* Size */
  int num_rows;
  int num_columns;
  int64_t num_nonzeros;
  int64_t size;
  int64_t nonzero_size;

  /* Data */
  void * data;
@};}
@end example

@subsection Memory management

@findex mtx_free
@findex mtx_copy
@example
@code{void mtx_free(
    struct mtx * mtx);

int mtx_copy(
    struct mtx * destmtx,
    const struct mtx * srcmtx);}
@end example

@subsection I/O

@findex mtx_fread
@findex mtx_fwrite
@findex mtx_gzread
@findex mtx_gzwrite
@findex mtx_read
@findex mtx_write
@example
@code{int mtx_fread(
    struct mtx * mtx,
    FILE * f,
    int * line_number,
    int * column_number);

int mtx_fwrite(
    const struct mtx * mtx,
    FILE * f,
    const char * format);

int mtx_gzread(
    struct mtx * mtx,
    gzFile f,
    int * line_number,
    int * column_number);

int mtx_gzwrite(
    const struct mtx * mtx,
    gzFile f,
    const char * format);

int mtx_read(
    struct mtx * mtx,
    const char * path,
    bool gzip,
    int * line_number,
    int * column_number);

int mtx_write(
    const struct mtx * mtx,
    const char * path,
    bool gzip,
    const char * format);}
@end example

@subsection Sparse matrices

@findex mtx_init_matrix_coordinate_real
@findex mtx_init_matrix_coordinate_double
@findex mtx_init_matrix_coordinate_complex
@findex mtx_init_matrix_coordinate_integer
@findex mtx_init_matrix_coordinate_pattern
@example
@code{int mtx_init_matrix_coordinate_real(
    struct mtx * mtx,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    int64_t size,
    const struct mtx_matrix_coordinate_real * data);

int mtx_init_matrix_coordinate_double(
    struct mtx * matrix,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    int64_t size,
    const struct mtx_matrix_coordinate_double * data);

int mtx_init_matrix_coordinate_complex(
    struct mtx * matrix,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    int64_t size,
    const struct mtx_matrix_coordinate_complex * data);

int mtx_init_matrix_coordinate_integer(
    struct mtx * matrix,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    int64_t size,
    const struct mtx_matrix_coordinate_integer * data);

int mtx_init_matrix_coordinate_pattern(
    struct mtx * matrix,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    int64_t size,
    const struct mtx_matrix_coordinate_pattern * data);}
@end example

@subsection Dense matrices
@findex mtx_init_matrix_array_real
@findex mtx_init_matrix_array_double
@findex mtx_init_matrix_array_complex
@findex mtx_init_matrix_array_integer
@example
@code{int mtx_init_matrix_array_real(
    struct mtx * mtx,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    const float * data);

int mtx_init_matrix_array_double(
    struct mtx * mtx,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    const double * data);

int mtx_init_matrix_array_complex(
    struct mtx * mtx,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    const float * data);

int mtx_init_matrix_array_integer(
    struct mtx * mtx,
    enum mtx_symmetry symmetry,
    enum mtx_triangle triangle,
    enum mtx_sorting sorting,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int num_columns,
    const int * data);}
@end example

@subsection Dense vectors
@findex mtx_init_vector_array_real
@findex mtx_init_vector_array_double
@findex mtx_init_vector_array_complex
@findex mtx_init_vector_array_integer
@example
@code{int mtx_init_vector_array_real(
    struct mtx * vector,
    int num_comment_lines,
    const char ** comment_lines,
    int size,
    const float * data);

int mtx_init_vector_array_double(
    struct mtx * vector,
    int num_comment_lines,
    const char ** comment_lines,
    int size,
    const double * data);

int mtx_init_vector_array_complex(
    struct mtx * vector,
    int num_comment_lines,
    const char ** comment_lines,
    int size,
    const float * data);

int mtx_init_vector_array_integer(
    struct mtx * vector,
    int num_comment_lines,
    const char ** comment_lines,
    int size,
    const int * data);}
@end example

@subsection Sparse vectors
@findex mtx_init_vector_coordinate_real
@findex mtx_init_vector_coordinate_double
@findex mtx_init_vector_coordinate_complex
@findex mtx_init_vector_coordinate_integer
@example
@code{int mtx_init_vector_coordinate_real(
    struct mtx * mtx,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int size,
    const struct mtx_vector_coordinate_real * data);

int mtx_init_vector_coordinate_double(
    struct mtx * mtx,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int size,
    const struct mtx_vector_coordinate_double * data);

int mtx_init_vector_coordinate_complex(
    struct mtx * mtx,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int size,
    const struct mtx_vector_coordinate_complex * data);

int mtx_init_vector_coordinate_integer(
    struct mtx * mtx,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int size,
    const struct mtx_vector_coordinate_integer * data);

int mtx_init_vector_coordinate_pattern(
    struct mtx * mtx,
    enum mtx_sorting sorting,
    enum mtx_ordering ordering,
    enum mtx_assembly assembly,
    int num_comment_lines,
    const char ** comment_lines,
    int num_rows,
    int size,
    const struct mtx_vector_coordinate_pattern * data);}
@end example


@section Matrix and vector operations
@findex mtx_sort
@findex mtx_matrix_transpose
@findex mtx_matrix_submatrix
@example
@code{int mtx_sort(
    struct mtx * mtx,
    struct mtx_sorting sorting);

int mtx_matrix_transpose(
    struct mtx * mtx);

int mtx_matrix_submatrix(
    const struct mtx * mtx,
    const struct mtxidxset * rows,
    const struct mtxidxset * columns,
    struct mtx * submatrix);}
@end example

@section BLAS

@subsection Level 1 BLAS operations
@findex mtx_sscal
@findex mtx_dscal
@findex mtx_saxpy
@findex mtx_daxpy
@findex mtx_sdot
@findex mtx_ddot
@findex mtx_snrm2
@findex mtx_dnrm2
@example
@code{int mtx_sscal(
    float a,
    struct mtx * x);

int mtx_dscal(
    double a,
    struct mtx * x);

int mtx_saxpy(
    float a,
    const struct mtx * x,
    struct mtx * y);

int mtx_daxpy(
    double a,
    const struct mtx * x,
    struct mtx * y);

int mtx_sdot(
    const struct mtx * x,
    const struct mtx * y,
    float * dot);

int mtx_ddot(
    const struct mtx * x,
    const struct mtx * y,
    double * dot);

int mtx_snrm2(
    const struct mtx * x,
    const struct mtx * y,
    float * nrm2);

int mtx_dnrm2(
    const struct mtx * x,
    const struct mtx * y,
    double * nrm2);}
@end example

@subsection Level 2 BLAS operations
@findex mtx_sgemv
@findex mtx_dgemv
@example
@code{int mtx_sgemv(
    float alpha,
    const struct mtx * A,
    const struct mtx * x,
    float beta,
    struct mtx * y);

int mtx_dgemv(
    double alpha,
    const struct mtx * A,
    const struct mtx * x,
    double beta,
    struct mtx * y);}
@end example


@subsection Level 3 BLAS operations
@findex mtx_sgemm
@findex mtx_dgemm


@section MPI communication

@subsection Send, receive and broadcast

@findex mtx_send
@findex mtx_recv
@findex mtx_bcast
@example
@code{int mtx_send(
    const struct mtx * mtx,
    int dest,
    int tag,
    MPI_Comm comm,
    int * mpierrcode);

int mtx_recv(
    struct mtx * mtx,
    int source,
    int tag,
    MPI_Comm comm,
    int * mpierrcode);

int mtx_bcast(
    struct mtx * mtx,
    int root,
    MPI_Comm comm,
    int * mpierrcode);}
@end example


@subsection Index sets

@tindex struct mtxidxset
@tindex enum mtxidxsettype
@findex mtxidxset_init_interval
@example
@code{int mtxidxset_init_interval(
    struct mtxidxset * index_set, int a, int b);

bool mtxidxset_contains(
    const struct mtxidxset * index_set, int n);}
@end example


@subsection Scatter and gather

@findex mtx_matrix_coordinate_gather
@findex mtx_matrix_coordinate_scatter
@example
@code{int mtx_matrix_coordinate_gather(
    struct mtx * dstmtx,
    const struct mtx * srcmtx,
    enum mtxpartitioning partitioning,
    MPI_Comm comm,
    int root,
    int * mpierrcode);

int mtx_matrix_coordinate_scatter(
    struct mtx * dstmtx,
    const struct mtx * srcmtx,
    const struct mtxidxset * row_sets,
    const struct mtxidxset * column_sets,
    MPI_Comm comm,
    int root,
    int * mpierrcode);}
@end example
