@c This file is part of libmtx.
@c Copyright (C) 2022 James D. Trotter
@c
@c libmtx is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c libmtx is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with libmtx.  If not, see <https://www.gnu.org/licenses/>.
@c
@c Authors: James D. Trotter <james@simula.no>
@c Last modified: 2022-01-16
@c
@c libmtx User Guide: Matrix Market file format.

@node Matrix Market file format
@chapter Matrix Market file format

This chapter describes the Matrix Market file format.

@cindex Matrix Market format
Matrix Market files, or @file{.mtx} files, are plain text ASCII files
that consist of the following four parts:
@enumerate
@item a @dfn{header line},
@item an optional section containing @dfn{comment lines},
@item a @dfn{size line}, and
@item @dfn{data lines} for nonzero matrix or vector entries.
@end enumerate

@noindent
Here is an example of a Matrix Market file, which describes a sparse
matrix with 4 rows, 5 columns and 7 real-valued, non-zero entries:
@example
@code{%%MatrixMarket matrix coordinate real general
% Sparse matrix example
4 5 7
1 2 2.0
3 3 3.0
1 1 1.0
4 5 1.0
2 2 1.0
4 1 -1.0
4 4 2.0}
@end example
@noindent
The above example is equivalent to the following 4-by-5 matrix:
@example
 1 2 0 0 0
 0 1 0 0 0
 0 0 3 0 0
-1 0 0 2 1
@end example

The different parts of a Matrix Market file are described in the
following subsections.

@menu
* Header line:: Matrix Market header.
* Comment lines:: Comments in Matrix Market files.
* Size line:: Size of Matrix Market objects.
* Data lines:: Matrix Market data.
@end menu


@node Header line
@section Header line

@cindex Matrix Market @subentry header line
@cindex Matrix Market format @subentry header line
@cindex header line
@cindex Matrix Market @subentry identifier
The @dfn{header line} is on the form:
@example
@code{%%MatrixMarket @var{object} @var{format} @var{field} @var{symmetry}}
@end example
@noindent
This line always begins with the identifier @samp{%%MatrixMarket} to
indicate that the file is in the Matrix Market format. The four fields
that follow describe different properties of the Matrix Market object,
such as whether it is a matrix or a vector, and if it is stored in
sparse or dense form.
@cindex Matrix Market format @subentry object
@cindex Matrix Market @subentry object
@enumerate
@item @code{@var{object}}
      is either @samp{matrix} or @samp{vector}.

@cindex Matrix Market format @subentry format
@cindex Matrix Market @subentry format
@cindex array
@cindex coordinate
@item @code{@var{format}}
      is @samp{array} if the data is stored in a dense format, or
      @samp{coordinate} if it is stored in a sparse format.

@cindex Matrix Market format @subentry field
@cindex Matrix Market @subentry field
@cindex real
@cindex complex
@cindex integer
@cindex pattern
@item @code{@var{field}}
      indicates the field to which the matrix (or vector) values
      belong, and may be one of the following: @samp{real},
      @samp{complex}, @samp{integer} or @samp{pattern}.

@cindex Matrix Market format @subentry symmetry
@cindex Matrix Market @subentry symmetry
@cindex symmetry
@cindex unsymmetric
@cindex symmetric
@cindex skew-symmetric
@cindex Hermitian
@item @code{@var{symmetry}}
      specifies the symmetry properties of a matrix, and may be one of
      the following: @samp{general}, @samp{symmetric},
      @samp{skew-symmetric} or @samp{hermitian}.
@end enumerate

@cindex Matrix Market format @subentry field
@cindex Matrix Market @subentry field
@cindex real
@cindex complex
@cindex integer
@cindex pattern
The @code{@var{field}} value of the header is used as follows:
@itemize
@item For real-valued matrices or vectors,
@code{@var{field}} is @samp{real}, and values are stored as decimal
numbers.

@item For complex matrices or vectors,
@code{@var{field}} is @samp{complex}, and values are stored as pairs
of decimal numbers, comprising the real and imaginary parts of a
complex number.

@item For integer-valued matrices or vectors,
@code{@var{field}} is @samp{integer}, and values are stored as
integers.

@item For binary-valued sparse matrices or vectors,
@code{@var{field}} is @samp{pattern}. No values are stored for nonzero
matrix or vector entries. Instead, only the locations of nonzeros are
stored.
@end itemize

@cindex Matrix Market format @subentry symmetry
@cindex Matrix Market @subentry symmetry
@cindex symmetry
@cindex unsymmetric
@cindex symmetric
@cindex skew-symmetric
@cindex Hermitian
The @code{@var{symmetry}} value of the header is ignored if
@code{@var{object}} is @samp{vector}.  However, if @code{@var{object}}
is @samp{matrix}, then it is used as follows:
@itemize
@item For a general, unsymmetric matrix,
@code{@var{symmetry}} is @samp{general}. Every nonzero matrix entry is
stored explicitly.

@cindex triangular matrix
@cindex row major
@item For a symmetric matrix,
(i.e., a matrix that is equal to its transpose), @code{@var{symmetry}}
is @samp{symmetric}. The matrix must be square.  If
@code{@var{format}} is @samp{array}, then only the lower or upper
triangular part of the matrix is stored explicitly.  (Note that there
is no indication in the Matrix Market file regarding which part is
stored, but libmtx assumes by default that the lower triangular part
is stored in row major order.)  Otherwise, if @code{@var{format}} is
@samp{coordinate}, then values may be explicitly represented from the
lower or upper triangular part of the matrix, or both.

@item For a Hermitian matrix,
(i.e., a matrix that is equal to its conjugate transpose),
@code{@var{symmetry}} is @samp{hermitian}. The matrix must be square.
If @code{@var{format}} is @samp{array}, then only the lower or upper
triangular part of the matrix is stored explicitly. (Note that there
is no indication in the Matrix Market file regarding which part is
stored, but libmtx assumes by default that the lower triangular part
is stored in row major order.)  Otherwise, if @code{@var{format}} is
@samp{coordinate}, then values may be explicitly represented from the
lower or upper triangular part of the matrix, or both.

@item For a skew-symmetric matrix,
(i.e., a matrix that is equal to the negative of its transpose),
@code{@var{symmetry}} is @samp{skew-symmetric}. The matrix must be
square, but skew symmetry implies that diagonal entries are zero.
Therefore, if @code{@var{format}} is @samp{array}, then only the
strictly lower or upper triangular part of the matrix is stored
explicitly.  (Note that there is no indication in the Matrix Market
file regarding which part is stored, but libmtx assumes by default
that the strictly lower triangular part is stored in row major order.)
Otherwise, if @code{@var{format}} is @samp{coordinate}, then values
may be explicitly represented from the strictly lower or upper
triangular part of the matrix, or both.  Nonzero diagonal entries are
not allowed.

@end itemize


@node Comment lines
@section Comment lines
@cindex Matrix Market format @subentry comment lines
@cindex Matrix Market @subentry comment lines
@cindex comment lines
Matrix Market files allow for an optional section of comments, which
are ignored when processing the file. If present, comments must follow
immediately after the header line and right before the size line. Each
comment line begins with the character @samp{%} and continues until
the end of the line.


@node Size line
@section Size line
@cindex Matrix Market format @subentry size line
@cindex Matrix Market @subentry size line
@cindex size line
The @dfn{size line} describes the size of the object stored in a
Matrix Market file, and it depends both on the @code{@var{object}} and
@code{@var{format}} values in the header.

@itemize
@item
@cindex dense vector
@cindex row vector
@cindex column vector
For dense vectors, where @code{@var{object}} is @samp{vector} and
@code{@var{format}} is @samp{array}, the size line is on the form
@example
@code{@var{m}}
@end example
Here, @code{@var{m}} denotes the number of rows of a column vector,
or, alternatively, the number of columns of a row vector.  This is
also the number of vector entries that are stored in the data section
of the Matrix Market file.

@item
@cindex sparse vector
@cindex row vector
@cindex column vector
For sparse vectors, where @code{@var{object}} is @samp{vector} and
@code{@var{format}} is @samp{coordinate}, the size line is on the form
@example
@code{@var{m} @var{nnz}}
@end example
Here, @code{@var{m}} denotes the number of rows of a column vector,
or, alternatively, the number of columns of a row vector, whereas
@code{@var{nnz}} denotes the number of (nonzero) vector entries that
are explicitly stored in the data section of the Matrix Market file.

@cindex dense matrix
@item
For dense matrices, where @code{@var{object}} is @samp{matrix} and
@code{@var{format}} is @samp{array}, the size line is on the form
@example
@code{@var{m} @var{n}}
@end example
Here, @code{@var{m}} and @code{@var{n}} denote the number of rows and
columns in the matrix.  In the case of a general, unsymmetric matrix,
where @code{@var{symmetry}} is @samp{general}, there are
@samp{@var{m}*@var{n}} matrix entries stored in the data section of
the Matrix Market file.  If @code{@var{symmetry}} is @samp{symmetric}
or @samp{hermitian}, then @code{@var{m}} and @code{@var{n}} are equal,
and there are @samp{@var{m}*(@var{n}+1)/2} entries in the data
section.  Finally, if @code{@var{symmetry}} is @samp{skew-symmetric},
then @code{@var{m}} and @code{@var{n}} are again equal, and there are
@samp{@var{m}*(@var{n}-1)/2} entries in the data section.

@cindex sparse matrix
@item
For sparse matrices, where @code{@var{object}} is @samp{matrix} and
@code{@var{format}} is @samp{coordinate}, the size line is on the form
@example
@code{@var{m} @var{n} @var{nnz}}
@end example
Here, @code{@var{m}} and @code{@var{n}} denote the number of rows and
columns in the matrix, whereas @code{@var{nnz}} denotes the number of
(nonzero) matrix entries that are explicitly stored in the data
section of the Matrix Market file.
@end itemize


@node Data lines
@section Data lines
@cindex Matrix Market format @subentry data lines
@cindex Matrix Market @subentry data lines
@cindex data line
The final section of a Matrix Market file contains @dfn{data lines}
for each nonzero matrix (or vector) entry. The number of data lines
depends on the matrix (or vector) size, as described in the previous
section.

@cindex row major
By default, it is assumed that dense matrix entries are stored in
row major order.

@cindex duplicate nonzeros
@cindex assemble
For sparse matrices and vectors, the nonzero entries may appear in any
order.  Moreover, there may be more than one value given that
corresponds to a single location in a sparse matrix or vector.  In
this case, the value associated with a particular matrix or vector
entry can be obtained by taking the sum of all the nonzero values
given for that location.  The procedure of adding together values for
duplicate entries is sometimes referred to as @dfn{assembly}.

The format of a data line depends on the @code{@var{object}},
@code{@var{format}} and @code{@var{field}} values in the header, as
described in the following.

@cindex dense matrix
@cindex dense vector
A dense matrix or vector with real or integer values (that is,
@code{@var{format}} is @samp{array} and @code{@var{field}} is
@samp{real} or @samp{integer}), has data lines on the form
@example
@code{@var{a}}
@end example
@noindent
where @code{@var{a}} is a decimal number if @code{@var{field}} is
@samp{real}, or an integer if @code{@var{field}} is @samp{integer}.

Otherwise, if @code{@var{format}} is @samp{array} and
@code{@var{field}} is @samp{complex}, then data lines are on the form
@example
@code{@var{a} @var{b}}
@end example
Here @code{@var{a}} and @code{@var{b}} are decimal numbers denoting
the real and imaginary parts of the complex number,
@samp{@var{z}=@var{a}+@var{b}*i}, where @samp{i} is the imaginary
unit.

@cindex sparse matrix
A sparse matrix, (that is, @code{@var{object}} is @samp{matrix} and
@code{@var{format}} is @samp{coordinate}), has data lines on one of
three different forms depending on the @code{@var{field}} value. Note
that indexing of sparse matrix and vector entries is 1-based.

@itemize
@item
If @code{@var{field}} is @samp{real} or @samp{integer}, then data
lines are written as:
@example
@code{@var{i} @var{j} @var{a}}
@end example
where @code{@var{i}} and @code{@var{j}} denote the row and column
index of a nonzero entry and @code{@var{a}} denotes its value.

@item
If @code{@var{field}} is @samp{complex}, then data lines are on the
form
@example
@code{@var{i} @var{j} @var{a} @var{b}}
@end example
where @code{@var{i}} and @code{@var{j}} again denote the row and
column index. Here, @code{@var{a}} is the real part and @code{@var{b}}
is the imaginary part of the complex number,
@samp{@var{z}=@var{a}+@var{b}*i}, with @samp{i} being the imaginary
unit.

@item
If @code{@var{field}} is @samp{pattern}, then each data line consists
of two numbers
@example
@code{@var{i} @var{j}}
@end example
denoting the row and column index of a nonzero entry.
@end itemize

@cindex sparse vector
For a sparse vector, (that is, @code{@var{object}} is @samp{vector}
and @code{@var{format}} is @samp{coordinate}), the data lines are
similar to those of a sparse matrix, but the column index is
omitted. More specifically, data lines are on one of three different
forms depending on the @code{@var{field}} value.
@itemize
@item
If @code{@var{field}} is @samp{real} or @samp{integer}, then data
lines are written as:
@example
@code{@var{i} @var{a}}
@end example
where @code{@var{i}} denotes the index of a nonzero entry and
@code{@var{a}} denotes its value.

@item
If @code{@var{field}} is @samp{complex}, then data lines are on the
form
@example
@code{@var{i} @var{a} @var{b}}
@end example
where @code{@var{i}} again denotes the nonzero index. Here,
@code{@var{a}} is the real part and @code{@var{b}} is the imaginary
part of the complex number, @samp{@var{z}=@var{a}+@var{b}*i}, with
@samp{i} being the imaginary unit.

@item
If @code{@var{field}} is @samp{pattern}, then each data line consists
of a single number
@example
@code{@var{i}}
@end example
denoting the index of a nonzero entry.
@end itemize
