@c This file is part of libmtx.
@c Copyright (C) 2022 James D. Trotter
@c
@c libmtx is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c libmtx is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@c General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with libmtx.  If not, see <https://www.gnu.org/licenses/>.
@c
@c Authors: James D. Trotter <james@simula.no>
@c Last modified: 2022-01-09
@c
@c libmtx User Guide: Distributed matrices and vectors.

@node Distributed matrices and vectors
@chapter Distributed matrices and vectors
This chapter describes how to distribute matrices and vectors across
multiple processes, and how to perform various linear algebra
operations on distributed matrices and vectors. The distributed-memory
computing features in libmtx are implemented using MPI, and,
therefore, you will need to build libmtx with MPI support.

@menu
* Partitioning:: Partitioning distributed matrices and vectors.
* Distributed vectors:: Data structures for distributed vectors.
* Distributed matrices:: Data structures for distributed matrices.
@end menu


@node Partitioning
@section Partitioning
@cindex partitioning
Distributed matrices and vectors are created by partitioning their
rows and columns to establish which matrix and vector elements are
owned by each process. After partitioning, the matrix and vector
elements are distributed to the processes that own them.

@cindex index set
@cindex distributed partition
This section covers @dfn{index sets} and @dfn{distributed partitions},
which are key concepts needed for partitioning and distributing
matrices and vectors.

@node Index sets
@subsection Index sets

@cindex Index set
An @dfn{index set} is a set of integers, typically used to represent a
subset of the rows of a vector or the rows or columns of a
matrix. Index sets are used, for example, when specifying submatrices
of a matrix, or for partitioning and distributing matrices and vectors
among multiple processes.

@tindex struct mtxidxset
@tindex enum mtxidxsettype
The file @file{libmtx/util/index_set.h} defines the data types
@code{enum mtxidxsettype} and @code{struct mtxidxset}. The latter is
used to represent an index set, whereas the former is needed to
enumerate different kinds of index sets.
@example
@code{enum mtxidxsettype @{
    mtxidxset_interval,      /* contiguous interval of integers */
    mtxidxset_strided,       /* integers separated by a stride */
    mtxidxset_blockstrided,  /* fixed-size sets of integers
                              * separated by a stride */
    mtxidxset_array,         /* index set given by an array */
@};}
@end example
As shown above, there are four main kinds of index sets.

@itemize
@item @samp{mtxidxset_interval}
is a contiguous set of integers from a half-open interval
@code{[a,b)}.

@item @samp{mtxidxset_strided}
is a set of @code{N} integers, @code{@{a,a+r,a+2*r,...,a+(N-1)*r@}},
defined by a starting integer @code{a} and a fixed stride @code{r}.

@item @samp{mtxidxset_blockstrided}
is a set of @code{N} blocks of integers, @code{@{a,a+1,...,a+(M-1),
a+M*r,a+M*r+1,...,a+M*r+(M-1)), a+2*M*r,a+2*M*r+1,...,a+2*M*r+(M-1)),
..., a+(N-1)*M*r,a+(N-1)*M*r+1,...,a+(N-1)*M*r+(M-1))@}}.  Here, each
block is of size @code{M}, the starting integer is @code{a}, and the
stride is @code{r}.

@item @samp{mtxidxset_array}
represents an index set defined by an array of integers,
@code{a[0],a[1],...,a[N-1]}.
@end itemize

The @code{mtxidxset} struct is defined as follows.
@example
@code{struct mtxidxset @{
    enum mtxidxsettype type;
    int64_t size;
    int64_t offset;
    int stride;
    int block_size;
    int64_t * indices;
@};}
@end example
@code{type} is the type of index set, and @code{size} is the number of
elements in the index set. @code{offset} is an offset to the first
element of the indexed set, if @code{type} is
@samp{mtxidxset_interval}, @samp{mtxidxset_strided} or
@samp{mtxidxset_blockstrided}. Otherwise, this @code{offset} is not
used.

@code{stride} is a stride between elements of the indexed set, if
@code{type} is @samp{mtxidxset_strided} or
@samp{mtxidxset_blockstrided}. Otherwise, this value is not used.

@code{block_size} is the size of each block, if @code{type} is
@samp{mtxidxset_blockstrided}.  Otherwise, this value is not used.

@code{indices} is an array containing the indices of the index set, if
@code{type} is @samp{mtxidxset_array}.  Otherwise, this value is not
used.


An index set representing a half-open interval @code{[a,b)} can be
created with @code{mtxidxset_init_interval}.
@findex mtxidxset_init_interval
@example
@code{int mtxidxset_init_interval(
    struct mtxidxset * index_set, int a, int b);}
@end example
Then, the function @code{mtxidxset_contains} can be used to test if
a given integer @code{n} belongs to the index set.
@findex mtxidxset_contains
@example
@code{bool mtxidxset_contains(
    const struct mtxidxset * index_set, int n);}
@end example

@node Distributed partitions
@subsection Distributed partitions
@cindex partitioning
@tindex enum mtxpartitioning
There are different kinds of partitionings, which may be represented
by using the type @code{enum mtxpartitioning}.
@example
@code{enum mtxpartitioning @{
    mtx_singleton,    /* singleton partition with only one component */
    mtx_block,        /* contiguous, fixed-size blocks */
    mtx_cyclic,       /* cyclic partition */
    mtx_block_cyclic, /* cyclic partition of fixed-size blocks. */
    mtx_partition,    /* general partition */
@};}
@end example

@cindex distributed partitioning
@tindex struct mtxdistpartition
A partitioning of a set that is distributed among multiple processes
is represented by @code{struct mtxdistpartition}.
@example
@code{struct mtxdistpartition @{
    MPI_Comm comm;
    int comm_size;
    int rank;

    enum mtxpartitioning type;

    /**
     * ‘size’ is the number of elements in the partitioned set.
     */
    int64_t size;

    /**
     * ‘num_parts’ is the number of parts in the partition, which must
     * be equal to the size of the MPI communicator.
     */
    int num_parts;

    /**
     * ‘index_set’ is an index set that describes the elements of the
     * partitioned set belonging to the current process.
     */
    struct mtxidxset index_set;
@};}
@end example




@node Distributed vectors
@section Distributed vectors
@cindex distributed vector
@tindex struct mtxdistvector
The file @file{libmtx/distvector/distvector.h} defines the type
@code{struct mtxdistvector}. This data type builds on top of
@code{struct mtxvector} (see @ref{Vectors}) to offer different options
for the underlying storage and implementation of vector operations.
@example
@code{struct mtxdistvector @{
    MPI_Comm comm;
    int comm_size;
    int rank;
    struct mtxvector interior;
@};}
@end example
Similar to @code{mtxdistfile} (see @ref{Data structures for
distributed Matrix Market files}), The first three struct members of
@code{mtxdistvector} contain information about the group of processes
sharing the distributed vector. This includes their MPI communicator
(@code{comm}), the number of processes (@code{comm_size}) and the rank
of the current process (@code{rank}). The vector, @code{interior},
stores the part of the distributed vector that resides on the current
process.


@node Halo exchange
@subsection Halo exchange
@cindex halo exchange
Some linear algebra operations involving distributed vectors will
require communication between MPI processes. This is particularly the
case for matrix-vector multiplication. This kind of communication is
commonly implemented through a @dfn{halo exchange}. This section
describes data structures for representing vector halos, and how to
perform halo exchanges.


@node Distributed matrices
@section Distributed matrices
@cindex distributed matrix
@tindex struct mtxdistmatrix
The file @file{libmtx/distmatrix/distmatrix.h} defines the type
@code{struct mtxdistmatrix}. This data type builds on top of
@code{struct mtxmatrix} (see @ref{Matrices}) to offer different options
for the underlying storage and implementation of matrix operations.
@example
@code{struct mtxdistmatrix @{
    MPI_Comm comm;
    int comm_size;
    int rank;
    struct mtxmatrix interior;
@};}
@end example
Similar to @code{mtxdistfile} (see @ref{Data structures for
distributed Matrix Market files}), The first three struct members of
@code{mtxdistmatrix} contain information about the group of processes
sharing the distributed matrix. This includes their MPI communicator
(@code{comm}), the number of processes (@code{comm_size}) and the rank
of the current process (@code{rank}). The matrix, @code{interior},
stores the part of the distributed matrix that resides on the current
process.



@c @menu
@c * Data types:: Basic data types for representing distributed matrices and vectors.
@c * Creating distributed matrices and vectors:: Functions for creating distributed matrices and vectors.
@c @end menu


@c @node Data types
@c @section Data types

@c This section describes the basic data types used to represent
@c distributed matrices and vectors.

@c @tindex struct mtxdist
@c @tindex mtxdist
@c The file @file{libmtx/mtxdist.h} defines the @code{struct
@c mtxdist} type, which is used to represent distributed objects in the
@c Matrix Market format. The definition of the @code{mtxdist} struct is shown
@c below.
@c @example
@c @code{struct mtxdist @{
@c   /* Data distribution */
@c   MPI_Comm comm;
@c   enum mtx_distribution row_distribution;
@c   enum mtx_distribution column_distribution;
@c   int64_t num_global_rows;
@c   int64_t num_global_columns;
@c   int num_block_rows;
@c   int num_block_columns;
@c   int block_row_size;
@c   int block_column_size;
@c   int block_row;
@c   int block_column;
@c   int64_t * global_rows;
@c   int64_t * global_columns;

@c   /* Matrix Market object */
@c   struct mtx * mtx;
@c @};}
@c @end example

@c The @code{mtxdist} struct contains information about how the
@c underlying matrix or vector is distributed among processes.  It also
@c contains a member of type @code{struct mtx}, which, on a given MPI
@c process, represents the underlying, local matrix of the current
@c process.


@c The following sections provide a detailed explanation of the
@c @code{mtxdist} struct members and their data types.


@c @node Data distribution
@c @subsection Data distribution

@c @cindex data distribution
@c @cindex distributed matrix
@c @cindex distributed vector
@c @cindex block distribution
@c @cindex cyclic distribution
@c @cindex block-cyclic distribution
@c @cindex discrete distribution
@c @tindex mtx_distribution
@c It is often necessary to distribute large matrices and vectors across
@c multiple processes, both for the purpose of performing computations in
@c parallel and also to use multiple nodes, thereby increasing the total
@c amount of available memory.  To facilitate such data distribution,
@c some additional information is stored in the @code{mtx} struct.

@c First, we define the additional enum type @code{mtx_distribution},
@c which describes different methods for distributing a one-dimensional
@c data structure, such as a vector, among multiple processes.  Matrices
@c are distributed by independently specifying the distributions of the
@c rows and columns.
@c @example
@c @code{enum mtx_distribution @{
@c     mtx_private,           /* owned by a single process */
@c     mtx_replicated,        /* replicated across every process */
@c     mtx_block,             /* block distribution */
@c     mtx_cyclic,            /* cyclic distribution */
@c     mtx_block_cyclic,      /* block-cyclic distribution */
@c     mtx_discrete,          /* discrete distribution */
@c @};}
@c @end example
@c By default, matrices and vectors are not distributed
@c (@code{mtx_private}).  That is, the entries of a vector and the rows
@c and columns of a matrix are owned by a single process.

@c For a distributed vector, @code{mtx_block} is used when the vector is
@c partitioned into contiguous blocks of roughly equal size and one block
@c is assigned to each process.  In contrast, @code{mtx_cyclic} assigns
@c consecutive entries of the vector to successive processes.  By
@c generalising the block and cyclic distributions,
@c @code{mtx_block_cyclic} assigns consecutive, fixed-size blocks to
@c successive processes.  Finally, @code{mtx_discrete} allows an
@c arbitrary assignment of global vector entries to processes.


@c @cindex cover
@c @cindex partition
@c @tindex mtxpartitioning
@c The enum type @code{mtxpartitioning}, is used to describe whether the
@c rows and columns of a distributed matrix or vector form a partition or
@c merely a cover of the rows and columns of a global matrix or
@c vector. In the case of a partition, each matrix or vector entry is
@c owned by a single MPI process. In the case of a cover, different MPI
@c processes are allowed to store values associated with the same matrix
@c or vector entry.
@c @example
@c @code{enum mtxpartitioning @{
@c     mtxpartition,   /* matrix/vector entries are owned
@c                          * by a single MPI process. */
@c     mtx_cover,       /* matrix/vector entries may be owned
@c                          * by multiple MPI processes. */
@c @};}
@c @end example
@c Note that some algorithms may only work with a partitioned matrix and
@c might produce incorrect results in the case of a covering. Thus, it
@c may be necessary to first perform a reduction to combine values
@c associated with matrix or vector entries that are distributed across
@c multiple MPI processes.


@c @node Index sets
@c @subsection Index sets

@c @cindex Index set
@c An @dfn{index set} is a set of integers, typically used to represent a
@c subset of the rows of a vector or the rows or columns of a
@c matrix. Index sets are used, for example, when specifying submatrices
@c of a matrix, or for partitioning and distributing matrices and vectors
@c among multiple processes.

@c @tindex struct mtxidxset
@c @tindex enum mtxidxsettype
@c The file @file{libmtx/util/index_set.h} defines data types for index
@c sets, including @code{struct mtxidxset}. There are different types
@c of index sets, which may be distinguished by the enum type
@c @code{mtxidxsettype}.
@c @itemize
@c @item @code{mtxidxset_interval}
@c represents an index set of contiguous integers from a half-open
@c interval @code{[a,b)}.

@c @item @code{mtxidxset_array}
@c represents a discrete index set, which is not necessarily contiguous,
@c as an array of integers.

@c @end itemize

@c An index set representing a half-open interval @code{[a,b)} can be
@c created with @code{mtxidxset_init_interval}.
@c @findex mtxidxset_init_interval
@c @example
@c @code{int mtxidxset_init_interval(
@c     struct mtxidxset * index_set, int a, int b);}
@c @end example
@c Then, the function @code{mtxidxset_contains} can be used to test if
@c a given integer @code{n} belongs to the index set.
@c @findex mtxidxset_contains
@c @example
@c @code{bool mtxidxset_contains(
@c     const struct mtxidxset * index_set, int n);}
@c @end example


@c @node Creating distributed matrices and vectors
@c @section Creating distributed matrices and vectors
@c A number of functions are provided to more conveniently construct
@c distributed matrices and vectors. These are described in the following
@c subsections.


@c @node mtxdist_free
@c @subsection mtxdist_free

@c @findex mtxdist_free
@c Since a distributed matrix or vector represented by a @code{struct
@c mtxdist} allocates some storage for its data, the user is required to
@c free the allocated storage by calling @code{mtxdist_free} when they
@c are finished with the matrix or vector:
@c @example
@c @code{void mtxdist_free(
@c     struct mtxdist * mtxdist);}
@c @end example


@c @node Creating distributed vectors
@c @subsection Creating distributed vectors


@c @node Creating distributed matrices
@c @subsection Creating distributed matrices
